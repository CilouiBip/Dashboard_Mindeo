import React, { useMemo, useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { fetchActions, updateActionStatus } from '../api/actionsBeta';
import LoadingSpinner from '../components/common/LoadingSpinner';
import { Card } from '../components/ui/card';
import { Input } from '../components/ui/input';
import { StatusSelect } from '../components/project/StatusSelect';
import { ActionItem, ActionStatus } from '../types/projectBeta';

// Types
interface MetricCardProps {
  title: string;
  value: string | number;
  description: string;
}

const MetricCard: React.FC<MetricCardProps> = ({ title, value, description }) => (
  <Card className="p-4 bg-[#141517] border-[#2D2E3A]">
    <h3 className="text-sm font-medium text-gray-400">{title}</h3>
    <p className="text-2xl font-bold text-white mt-1">{value}</p>
    <p className="text-sm text-gray-500 mt-1">{description}</p>
  </Card>
);

const ProjectPlan = () => {
  const [searchQuery, setSearchQuery] = useState('');

  const { data: actions, isLoading, refetch } = useQuery({
    queryKey: ['actions'],
    queryFn: fetchActions
  });

  const filteredActions = useMemo(() => {
    if (!actions) return [];
    
    return actions.filter(action => {
      const matchesSearch = action.action.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          action.itemName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          action.functionName.toLowerCase().includes(searchQuery.toLowerCase());
      
      return matchesSearch;
    });
  }, [actions, searchQuery]);

  const estimatedHours = useMemo(() => {
    if (!filteredActions.length) return 0;
    return filteredActions.reduce((sum, action) => sum + action.estimatedHours, 0);
  }, [filteredActions]);

  const actualHours = useMemo(() => {
    if (!filteredActions.length) return 0;
    return filteredActions.reduce((sum, action) => sum + action.actualHours, 0);
  }, [filteredActions]);

  const updateStatus = async (actionId: string, newStatus: ActionStatus) => {
    try {
      await updateActionStatus(actionId, newStatus);
      await refetch();
    } catch (error) {
      console.error('Failed to update status:', error);
    }
  };

  if (isLoading) return <LoadingSpinner />;
  if (!actions) return null;

  return (
    <div className="p-6 space-y-8">
      <h1 className="text-2xl font-bold text-white">Project Plan (Beta)</h1>

      {/* Metrics Cards */}
      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
        <MetricCard 
          title="Heures Estimées"
          value={estimatedHours}
          description="Total des heures estimées"
        />
        <MetricCard 
          title="Heures Réelles"
          value={actualHours}
          description={`Variance: ${actualHours - estimatedHours > 0 ? '+' : ''}${actualHours - estimatedHours}`}
        />
      </div>

      {/* Filters */}
      <div className="flex gap-4">
        <Input
          placeholder="Rechercher..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="max-w-sm"
        />
      </div>

      {/* Actions Table */}
      <div className="bg-[#141517] rounded-lg border border-[#2D2E3A] overflow-hidden">
        <table className="w-full">
          <thead className="bg-[#1A1B1E]">
            <tr>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">ACTION</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">FONCTION</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">STATUS</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">SEMAINE</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">HEURES EST.</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-400">HEURES ACT.</th>
            </tr>
          </thead>
          <tbody className="divide-y divide-[#2D2E3A]">
            {filteredActions.map((action) => (
              <tr key={action.id} className="hover:bg-[#1A1B1E]">
                <td className="px-4 py-3 text-sm text-white">{action.action}</td>
                <td className="px-4 py-3 text-sm text-gray-400">{action.functionName}</td>
                <td className="px-4 py-3">
                  <StatusSelect 
                    actionId={action.id}
                    onStatusChange={updateStatus}
                  />
                </td>
                <td className="px-4 py-3 text-sm text-gray-400">{action.actionWeek}</td>
                <td className="px-4 py-3 text-sm text-gray-400">{action.estimatedHours}</td>
                <td className="px-4 py-3 text-sm text-gray-400">{action.actualHours}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default ProjectPlan;